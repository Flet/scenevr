// Generated by CoffeeScript 1.8.0
(function() {
  var Audio, Box, Fog, Link, Model, Plane, Scene, Script, Skybox, Spawn;

  Scene = require('../elements/scene');

  Script = require('../elements/script');

  Box = require('../elements/box');

  Plane = require('../elements/plane');

  Spawn = require('../elements/spawn');

  Model = require('../elements/model');

  Link = require('../elements/link');

  Skybox = require('../elements/skybox');

  Fog = require('../elements/fog');

  Audio = require('../elements/audio');

  describe('constructor', function() {
    return it('should create', function() {
      var s;
      s = new Scene("scene");
      expect(s instanceof Scene).toBeTruthy();
      return expect(s.nodeName).toEqual('scene');
    });
  });

  describe('scene', function() {
    it('should load scene', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/hello.xml', function(scene) {
        var box, script;
        expect(scene.childNodes.length).toEqual(7);
        box = scene.childNodes[1];
        expect(box instanceof Box).toBeTruthy();
        expect(box.position.y).toEqual(10.0);
        script = scene.childNodes[5];
        return expect(script instanceof Script).toBeTruthy();
      });
    });
    return it('should load scene with <script /> tags', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/script_tag.xml', function(scene) {
        var script;
        expect(scene.childNodes.length).toEqual(5);
        script = scene.childNodes[3];
        expect(script instanceof Script).toBeTruthy();
        return expect(script.textContent).toMatch(/10 < 20/);
      });
    });
  });

  xdescribe('compartmentalization', function() {
    var xml1, xml2;
    xml1 = "<scene><script>document.foo = 'bar';</script></scene>";
    xml2 = "<scene><script>console.dump(document.foo)</script></scene>";
    return it('should have seperate document instances', function() {
      var dumped;
      dumped = {};
      console.dump = function(obj) {
        return dumped = obj;
      };
      return Scene.load(xml1, function(scene1) {
        return Scene.load(xml2, function(scene2) {
          return expect(dumped).toBeUndefined();
        });
      });
    });
  });

  describe('all_tags', function() {
    it('should load', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        return expect(scene.childNodes.length).toBeGreaterThan(3);
      });
    });
    it('should parse spawn', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        expect(scene.getElementsByTagName("spawn").length).toEqual(1);
        return expect(scene.getElementsByTagName("spawn")[0] instanceof Spawn).toBeTruthy();
      });
    });
    it('should parse billboard', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        expect(scene.getElementsByTagName("billboard").length).toEqual(1);
        expect(scene.getElementsByTagName("billboard")[0].innerHTML).toMatch(/<h1>Welcome/);
        expect(scene.getElementsByTagName("billboard")[0].innerHTML).toMatch(/<!\[CDATA\[/);
        return expect(scene.getElementsByTagName("billboard")[0].innerHTML).toMatch(/stuff and things/);
      });
    });
    it('should parse model', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        expect(scene.getElementsByTagName("model").length).toEqual(1);
        expect(scene.getElementsByTagName("model")[0].src).toMatch(/blah.obj/);
        return expect(scene.getElementsByTagName("model")[0] instanceof Model).toBeTruthy();
      });
    });
    it('should parse link', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        expect(scene.getElementsByTagName("link").length).toEqual(1);
        expect(scene.getElementsByTagName("link")[0].href).toMatch(/test/);
        return expect(scene.getElementsByTagName("link")[0] instanceof Link).toBeTruthy();
      });
    });
    it('should parse skybox', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        expect(scene.getElementsByTagName("skybox").length).toEqual(1);
        expect(scene.getElementsByTagName("skybox")[0].src).toMatch(/blah/);
        return expect(scene.getElementsByTagName("skybox")[0] instanceof Skybox).toBeTruthy();
      });
    });
    it('should parse audio', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        expect(scene.getElementsByTagName("audio").length).toEqual(1);
        expect(scene.getElementsByTagName("audio")[0].src).toMatch(/drone/);
        return expect(scene.getElementsByTagName("audio")[0] instanceof Audio).toBeTruthy();
      });
    });
    it('should parse fog', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        expect(scene.getElementsByTagName("fog").length).toEqual(1);
        expect(scene.getElementsByTagName("fog")[0].style.color).toMatch('#fff');
        expect(scene.getElementsByTagName("fog")[0].near).toMatch('100');
        return expect(scene.getElementsByTagName("fog")[0] instanceof Fog).toBeTruthy();
      });
    });
    return it('should parse plane', function() {
      return Scene.load(process.cwd() + '/spec/fixtures/all_tags.xml', function(scene) {
        expect(scene.getElementsByTagName("plane").length).toEqual(1);
        expect(scene.getElementsByTagName("plane")[0].style.textureMap).toMatch('url');
        return expect(scene.getElementsByTagName("plane")[0] instanceof Plane).toBeTruthy();
      });
    });
  });

}).call(this);

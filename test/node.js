// Generated by CoffeeScript 1.8.0
(function() {
  var Document, HTMLElement, Node, ownerDocument;

  Node = require('../lib/node');

  HTMLElement = require("../lib/dom-lite").HTMLElement;

  Document = require('../lib/document');

  ownerDocument = Document.createDocument();

  describe('constructor', function() {
    return it('should create', function() {
      var n;
      n = new Node;
      return expect(n instanceof Node).toBeTruthy();
    });
  });

  describe('innerXML', function() {
    it('should set text', function() {
      var n;
      n = new Node;
      n.ownerDocument = ownerDocument;
      n.innerXML = "hello world";
      return expect(n.textContent).toEqual('hello world');
    });
    it('should create nodes', function() {
      var n;
      n = new Node;
      n.ownerDocument = ownerDocument;
      n.innerXML = "<box id='dave' />";
      expect(n.firstChild.nodeName).toEqual('box');
      return expect(n.firstChild.id).toEqual('dave');
    });
    return it('should get xml', function() {
      var n;
      n = new Node;
      n.ownerDocument = ownerDocument;
      n.innerXML = "<box id='dave' />";
      n.firstChild.id = 'mary';
      n.firstChild.setAttribute('class', 'nothing');
      return expect(n.innerXML).toMatch(/<box uuid\S+ id="mary" class="nothing".+/);
    });
  });

  describe('attributes', function() {
    return it('should ignore underscored attributes', function() {
      var n;
      n = new Node;
      n.ownerDocument = ownerDocument;
      n.innerXML = "<box />";
      n.firstChild._position = {
        toString: function() {
          return "1 2 3";
        }
      };
      return expect(n.innerXML).toMatch(/<box uuid\S+ position="1 2 3"><.box>/);
    });
  });

  describe('packetParser', function() {
    return it('should parse packets', function() {
      var n;
      n = Node.packetParser("<packet><event name='boop' /><player position='1 2 3' /></packet>");
      expect(n instanceof HTMLElement).toBeTruthy();
      expect(n.nodeName).toEqual("packet");
      expect(n.childNodes.length).toEqual(2);
      expect(n.firstChild.nodeName).toEqual('event');
      return expect(n.firstChild.getAttribute('name')).toEqual('boop');
    });
  });

}).call(this);
